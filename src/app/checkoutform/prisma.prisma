// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email String @unique
  password Password?
  firstName String
  lastName String
  role UserRole @default(PATIENT)
  phoneNumber String?
  prescriptions Prescription[] @relation("UserPrescriptions")
  pharmacistProfile Pharmacist? @relation("PharmacistProfile")
}

enum UserRole {
  PATIENT
  PHARMACIST
  ADMIN
}
model Password {
  hash String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Post {
  id        String     @id @default(cuid())
  title     String
  content   String  
  createdAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  tagId        String
  tags        Tag @relation(fields: [tagId], references: [id])
  // pharmacy          PharmacyStore @relation(fields: [pharmacyId]  , references: [id ])
  // pharmacyId        String 
  // user              User       @relation(fields: [userEmail], references: [email])
  // userEmail         String     @unique

  

  // published Boolean @default(false)
  // author    User    @relation(fields: [authorId], references: [id])
  // authorId  Int
}

model Prescribe {
  id        String @id  @default(cuid())
  userId    String
  createdAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  name        String
  description String
  upload      String?

}

model Admin{
  id           Int     @id @default(100)
  email        String  @unique
  password     String
  isActive     Boolean    @default(true)
  lastLogin    DateTime @default(now())
  privileges    String
}

model PharmacyStore{
  id   String  @id @default(cuid())
  name String
  address String
  phoneNumber String
  description String
  pcn String
  image String
  // Post Post[]
  medications Medication[]
  Pharmacist Pharmacist[]
}

model Pharmacist {
  id                String      @id @default(cuid())
  user              User        @relation("PharmacistProfile", fields: [userId], references: [id])
  userId            String      @unique
  licenseNumber     String      @unique
  specialization    String?
  yearsOfExperience Int
  pharmacy          PharmacyStore @relation(fields: [pharmacyId], references: [id])
  pharmacyId        String
  managedPrescriptions Prescription[] @relation("PharmacistPrescriptions")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Prescription {
  id                String      @id @default(cuid())
  patient           User        @relation("UserPrescriptions", fields: [patientId], references: [id])
  patientId         String
  patientName       String
  medication        String      // Name of the medication
  dosage            String      // Prescribed dosage
  frequency         String      // How often to take the medication
  quantity          Int         // Number of units prescribed
  instructions      String?     // Special instructions for taking the medication
  doctorName        String
  phoneNumber       String
  prescriptionDate  String 
  prescriptionFilePath String?
  status            StatusOrderEnum  @default(pending)
  declineReason     String?   @db.VarChar(255)
  pharmacist        Pharmacist? @relation("PharmacistPrescriptions", fields: [pharmacistId], references: [id])
  pharmacistId      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Tag{
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)  
  // description String?   @db.Text
  Post Post[]
}

model ShoppingCart{
  id               String   @id @default(uuid())
  cartid        String
  userId         String
}


model Order{
  id                  Int             @id @default(autoincrement())
  quantity            Float           
  price               Float         
  orderid             String
  drugs               String
  totalAmount         Float
  status              StatusOrderEnum
  orderDate           DateTime        @default(now())
  deliveryDate        DateTime?      
  clientEmail         String          @db.VarChar(50)
  clientPhoneNumber   BigInt          @db.BigInt
  // adressDelivery      AddressTypeEnum
  // cityDelivery         CityTypeEnum    @map("city_delivery")
  // reference            String?         @db.VarChar(255)
  // specialInstructions SpecialInstructionEnum?
  // product              Product
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  }


// model Post {
//   id          String   @id @default(cuid())
//   name        String   @db.VarChar(225)  
//   title       String   
//   content     String
//   createdAt   DateTime @default(now())
//   updateAt   DateTime @updatedAt
//   tagId        String
//   tags        Tag @relation(fields: [tagId], references: [id])
//   // description String?  @db.Text
//   // date        DateTime @default(now())
//   // views       Int      @default(0)
//   }





enum StatusOrderEnum {
  pending       
  approved 
  rejected
  }

model Medication {
  id                String      @id @default(cuid())
  name              String
  description       String?
  dosageForm        String      // e.g., tablet, capsule, liquid
  strength          String      // e.g., 500mg, 50ml
  manufacturer      String
  price             Float
  stockQuantity     Int
  reorderLevel      Int         // minimum quantity before reorder
  expiryDate        DateTime
  pharmacy          PharmacyStore @relation(fields: [pharmacyId], references: [id])
  pharmacyId        String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

  

  
